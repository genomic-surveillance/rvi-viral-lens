
Bootstrap: docker
From: ubuntu:22.04
Stage: spython-base

%labels
    NAME PangolinContainer
    AUTHOR Antonio Marinho
    ID ad45
    TEAM ARD/DAE
    LINUX_DIST Ubuntu:22.04
    REPO https://github.com/genomic-surveillance/rvi-viral-lens

%post
# //--- STAGING ---// 
# set release number
USHER_RELEASE="v0.6.3"
ISA_RELEASE="v2.30.0"
ONETBB_RELEASE="2019_U9"
GOFASTA_RELEASE="v1.2.1"
MINIMAP_RELEASE="v2.26"
PULP_VERSION="2.7.0"
SNAKEMAKE_VERSION="7.32.4"
PANGOLIN_RELEASE="v4.3.1"

# enables the "exit on error" mode
set -e

# |-----------------|

# install basic requeriments
apt update
DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends tzdata
apt install -y python3-pip wget git python-is-python3 

# setup app dir
mkdir /app/
mkdir /app/bin/

# // --- INSTALL UShER ---// 
# necessary for usher
apt-get install -yq --no-install-recommends build-essential \
  wget cmake  libboost-filesystem-dev libboost-program-options-dev \
  libboost-iostreams-dev libboost-date-time-dev \
  libprotoc-dev libprotoc-dev protobuf-compiler \
  mafft rsync libtbb-dev openmpi-bin libopenmpi-dev automake libtool autoconf make nasm

# --->  program for rapid, accurate placement of samples to existing phylogenies
cd /app/
git clone https://github.com/yatisht/usher.git
cd usher/
git checkout $USHER_VERSION

mkdir build/
cd build/

# install isa-l (Inteligent Storage Acceleration - for rapid file acess)
git clone https://github.com/intel/isa-l.git
cd isa-l/
git checkout $ISA_RELEASE
./autogen.sh
./configure
make -j 4
make install

# compile TBB (C++ library that simplifies the work of adding parallelism to complex applications)
cd ../
wget https://github.com/oneapi-src/oneTBB/archive/${ONETBB_RELEASE}.tar.gz
tar -xvzf ${ONETBB_RELEASE}.tar.gz
cmake  -DTBB_DIR=${PWD}/oneTBB-${ONETBB_RELEASE} -DCMAKE_PREFIX_PATH=${PWD}/oneTBB-${ONETBB_RELEASE}/cmake ..
make -j

# install faToVcf
rsync -aP rsync://hgdownload.soe.ucsc.edu/genome/admin/exe/linux.x86_64/faToVcf .
chmod +x faToVcf
mv faToVcf ../scripts/

export PATH=$PATH:/app/usher/build/
export PATH=$PATH:/app/usher/scripts/

# |-----------------|

# //--- INSTALL gofasta ---|
cd /app/
wget https://github.com/virus-evolution/gofasta/releases/download/${GOFASTA_RELEASE}/gofasta-linux-amd64
mv ./gofasta-linux-amd64 ./gofasta
chmod +x ./gofasta 
mv /app/gofasta /app/bin/

# |-----------------|

# //--- INSTALL minimap2
git clone https://github.com/lh3/minimap2
cd minimap2/
git checkout ${MINIMAP_RELEASE}
make
mv /app/minimap2/minimap2 /app/bin/
# |------------------|

# //---> ADD /app/bin/ to PATH
export PATH=$PATH:/app/bin/
# |------------------|

# //---> install pangolin python dependencies
pip install pulp==${PULP_VERSION}
pip install snakemake==${SNAKEMAKE_VERSION}
# |------------------|

# //---> INSTALL Pangolin
cd /app/
git clone https://github.com/cov-lineages/pangolin.git
cd pangolin/
git checkout ${PANGOLIN_RELEASE}
pip install .

# install pangolin data
# ---> pangolin-data stores the latest model
pip install git+https://github.com/cov-lineages/pangolin-data.git

# install scorpio
# ---> software to handle constellations of mutations for an aligned set of genome sequences
pip install git+https://github.com/cov-lineages/scorpio.git

# install constellations
# ---> provides descriptions of constellations of mutations for SARS-CoV-2
pip install git+https://github.com/cov-lineages/constellations.git

# |------------------|

# //---> get versions installed
PANGOLIN_DATA_VERSION=$(pangolin --all-versions | awk '/pangolin-data:/ {print $2}')
SCORPIO_VERSION=$(pangolin --all-versions | awk '/scorpio:/ {print $2}')
CONSTELLATIONS_VERSION=$(pangolin --all-versions | awk '/constellations:/ {print $2}')
FATOVCF_VERSION=$(pangolin --all-versions | awk '/faToVcf:/ {print $2}')

# get container build date 
NOW=`date`

# store variables on singularity environment
echo "export NOW=\"${NOW}\"" >> $SINGULARITY_ENVIRONMENT
echo "export PANGOLIN_DATA_VERSION=\"${PANGOLIN_DATA_VERSION}\"" >> $SINGULARITY_ENVIRONMENT
echo "export SCORPIO_VERSION=\"${SCORPIO_VERSION}\"" >> $SINGULARITY_ENVIRONMENT
echo "export CONSTELLATIONS_VERSION=\"${CONSTELLATIONS_VERSION}\"" >> $SINGULARITY_ENVIRONMENT
echo "export FATOVCF_VERSION=\"${FATOVCF_VERSION}\"" >> $SINGULARITY_ENVIRONMENT
echo "export PANGOLIN_RELEASE=\"${PANGOLIN_RELEASE}\"" >> $SINGULARITY_ENVIRONMENT
echo "export USHER_RELEASE=\"${USHER_RELEASE}\"" >> $SINGULARITY_ENVIRONMENT

%environment
    export PATH=$PATH:/app/usher/build/
    export PATH=$PATH:/app/usher/scripts/
    export PATH=$PATH:/app/bin/

%test
    pangolin --all-versions

%runscript
    echo "Container was created $NOW"
    echo " -- versions:"
    echo "PANGOLIN_RELEASE=${PANGOLIN_RELEASE}"
    echo "PANGOLIN_DATA_VERSION=${PANGOLIN_DATA_VERSION}"
    echo "CONSTELLATIONS_VERSION=${CONSTELLATIONS_VERSION}"
    echo "USHER_RELEASE=${USHER_RELEASE}"
    echo " ------------ "
    echo "Arguments received: $*"
    echo " ------------ "
    exec "$@"

