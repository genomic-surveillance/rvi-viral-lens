// Copyright (C) 2023 Genome Surveillance Unit/Genome Research Ltd.

def modifyPathsAndWriteCsv(String inputFile) {
    def projectDir = System.getProperty("user.dir") + "/tests/test_data" // Current working directory

    // Read CSV file
    def lines = new File(inputFile).readLines()

    // Modify paths and write to a new file
    def outputFile = new File(inputFile.replaceAll("\\.csv", "_located.csv"))
    def writer = new FileWriter(outputFile)

    lines.each { line ->
        def columns = line.split(',')
        if (columns.size() == 3) {
            // Modify reads_1 and reads_2 paths
            if (columns[1]!="reads_1") {
                columns[1] = "${projectDir}/${columns[1]}"
                columns[2] = "${projectDir}/${columns[2]}"
            }
        }
        writer.write(columns.join(',')+"\n")
    }

    writer.close()

    println("CSV file with located paths written to: ${outputFile}")
}

modifyPathsAndWriteCsv("tests/test_data/test_manifests/test_input_manifest.csv")
modifyPathsAndWriteCsv("tests/test_data/test_manifests/test_input_manifest.csv")
modifyPathsAndWriteCsv("tests/test_data/test_manifest_checks/consecutive_underscore_mnf.csv")
modifyPathsAndWriteCsv("tests/test_data/test_manifest_checks/duplicated_sample_id_mnf.csv")
modifyPathsAndWriteCsv("tests/test_data/test_manifest_checks/empty_sample_id_mnf.csv")
modifyPathsAndWriteCsv("tests/test_data/test_manifest_checks/mixed_errors_mnf.csv")

nextflow_pipeline {

    name "Test Workflow main.nf"
    script "main.nf"

    test("Should fail if invalid min_coverage_percent") {
       when{ 
        params {
            db_path="${projectDir}/tests/test_data/test_kraken_databases/minimal"
            manifest="${projectDir}/tests/test_data/test_manifests/test_input_manifest_located.csv"
            min_coverage_percent = "notAFloat"
            }
       }
        then {
            assert workflow.failed
            assert workflow.exitStatus == 1
            assert workflow.stdout.contains('ERROR ~ Validation of pipeline parameters failed!')
            assert workflow.stderr.contains('* --min_coverage_percent (notAFloat): Value is [string] but should be [integer]')


        }
    }

    test("Should fail if min_coverage_percent not between 0.0 and 100.0") {
       when{ 
        params {
            db_path="${projectDir}/tests/test_data/test_kraken_databases/minimal"
            manifest="${projectDir}/tests/test_data/test_manifests/test_input_manifest_located.csv"
            min_coverage_percent = 200.0
            }
       }
        then {
            assert workflow.failed
            assert workflow.exitStatus == 1
            assert workflow.stdout.contains('ERROR ~ min_coverage_percent value set (200.0) must be >=0.0 and <=100.0')

        }
    }

    test("Should fail on consecutive underscore on sample id") {

        when {
            params {
                db_path="${projectDir}/tests/test_data/test_kraken_databases/minimal"
                test_loc="${projectDir}/tests/test_data"
                db_path="${projectDir}/tests/test_data/test_kraken_databases/minimal"
                manifest="${params.test_loc}/test_manifest_checks/consecutive_underscore_mnf_located.csv"
                min_coverage_percent = 10.0

            }
        }

        then {
            assert workflow.failed
            assert workflow.exitStatus == 1
            assert workflow.stdout.contains('ERROR ~ Non alphanumeric sample id sample__04 [\'_\' is permitted]')
        }
    }

    test("Should fail on duplicated sample id") {

        when {
            params {
                db_path="${projectDir}/tests/test_data/test_kraken_databases/minimal"
                test_loc="${projectDir}/tests/test_data"
                db_path="${projectDir}/tests/test_data/test_kraken_databases/minimal"
                manifest="${params.test_loc}/test_manifest_checks/duplicated_sample_id_mnf_located.csv"

            }
        }

        then {
            assert workflow.failed
            assert workflow.exitStatus == 1
            assert workflow.stdout.contains('ERROR ~ sample01 is duplicated')
        }
    }

    test("Should fail on empty sample id") {

        when {
            params {
                test_loc="${projectDir}/tests/test_data"
                db_path="${projectDir}/tests/test_data/test_kraken_databases/minimal"
                manifest="${params.test_loc}/test_manifest_checks/empty_sample_id_mnf_located.csv"
            }
        }

        then {
            assert workflow.failed
            assert workflow.exitStatus == 1
            assert workflow.stdout.contains('ERROR ~ Empty sample_id detected.')
        }
    }

    test("Should fail and report on multiple errors on the manifest sample id") {

        when {
            params {
                test_loc="${projectDir}/tests/test_data"
                db_path="${projectDir}/tests/test_data/test_kraken_databases/minimal"
                manifest="${params.test_loc}/test_manifest_checks/mixed_errors_mnf_located.csv"
            }
        }

        then {
            assert workflow.failed
            assert workflow.exitStatus == 1
            assert workflow.stdout.contains('ERROR ~ Non alphanumeric sample id sample__04 [\'_\' is permitted]')
            assert workflow.stdout.contains('ERROR ~ sample01 is duplicated')
            assert workflow.stdout.contains('ERROR ~ Non alphanumeric sample id sample#03 [\'_\' is permitted]')
            assert workflow.stdout.contains('ERROR ~ 3 critical errors in the manifest were detected. Please check README for more details.')

        }
    }

    test("Should run without failures") {

        when {
            params {
                db_path="${projectDir}/tests/test_data/test_kraken_databases/minimal"
                manifest="${projectDir}/tests/test_data/test_manifests/test_input_manifest_located.csv"
                kraken2_cpus = 1
                developer_publish = true
            }
        }

        then {
            assert workflow.success

            // check if output files are as expected
            def sample_id_A = "FluH1N1_SARSCoV2_hPIV1_33K_ea_P1"
            def dir_A = "${launchDir}/results/${sample_id_A}/"
            assert file("${dir_A}/2697049/${sample_id_A}.2697049.consensus.fa").exists()
            assert file("${dir_A}/2697049/${sample_id_A}.2697049.sorted.bam").exists()
            assert file("${dir_A}/2697049/${sample_id_A}.2697049.sorted.bam.bai").exists()


            assert file("${dir_A}/9000016/${sample_id_A}.9000016.consensus.fa").exists()
            assert file("${dir_A}/9000016/${sample_id_A}.9000016.sorted.bam").exists()
            assert file("${dir_A}/9000016/${sample_id_A}.9000016.sorted.bam.bai").exists()

            def sample_id_B = "Zeptometrix_Panel_2_1_Control1_P1"
            def dir_B = "${launchDir}/results/${sample_id_B}/"

            assert file("${dir_B}/9000016/${sample_id_B}.9000016.consensus.fa").exists()
            assert file("${dir_B}/9000016/${sample_id_B}.9000016.sorted.bam").exists()
            assert file("${dir_B}/9000016/${sample_id_B}.9000016.sorted.bam.bai").exists()

            // check developer publish outputs
            // expected on the sample_id dir
            // qc.csv
            assert file("${dir_A}/2697049/${sample_id_A}.2697049.qc.csv").exists()
            assert file("${dir_A}/9000016/${sample_id_A}.9000016.qc.csv").exists()
            assert file("${dir_B}/9000016/${sample_id_B}.9000016.qc.csv").exists()

            // json
            assert file("${dir_A}/${sample_id_A}_decomposed.json")
            assert file("${dir_A}/${sample_id_A}_tax_to_reads.json")

            assert file("${dir_B}/${sample_id_B}_decomposed.json")
            assert file("${dir_B}/${sample_id_B}_tax_to_reads.json")

            // class_seqs.fq
            assert file("${dir_A}/${sample_id_A}.class_seqs_1.fq")
            assert file("${dir_A}/${sample_id_A}.class_seqs_2.fq")

            assert file("${dir_B}/${sample_id_B}.class_seqs_1.fq")
            assert file("${dir_B}/${sample_id_B}.class_seqs_2.fq")

            // kraken output and report
            assert file("${dir_A}/${sample_id_A}.kraken.output")
            assert file("${dir_A}/${sample_id_A}.report.txt")
            
            assert file("${dir_B}/${sample_id_B}.kraken.output")
            assert file("${dir_B}/${sample_id_B}.report.txt")

            // unclassified.fq
            assert file("${dir_A}/${sample_id_A}.unclass_seqs_1.fq")
            assert file("${dir_A}/${sample_id_A}.unclass_seqs_2.fq")

            assert file("${dir_B}/${sample_id_B}.unclass_seqs_1.fq")
            assert file("${dir_B}/${sample_id_B}.unclass_seqs_2.fq")

            // reads by taxon
            assert file("${dir_A}/${sample_id_A}_2697049_R1.fq")
            assert file("${dir_A}/${sample_id_A}_2697049_R2.fq")
            assert file("${dir_A}/${sample_id_A}_9000016_R1.fq")
            assert file("${dir_A}/${sample_id_A}_9000016_R2.fq")

            assert file("${dir_B}/${sample_id_B}_9000016_R1.fq")
            assert file("${dir_B}/${sample_id_B}_9000016_R2.fq")
        }


    }

}
