def modifyPathsAndWriteCsv(String inputFile) {
    def projectDir = System.getProperty("user.dir") + "/tests/test_data" // Current working directory

    // Read CSV file
    def lines = new File(inputFile).readLines()

    // Modify paths and write to a new file
    def outputFile = new File(inputFile.replaceAll("\\.csv", "_located.csv"))
    def writer = new FileWriter(outputFile)

    lines.each { line ->
        def columns = line.split(',')
        if (columns.size() == 3) {
            // Modify reads_1 and reads_2 paths
            if (columns[1]!="reads_1") {
                columns[1] = "${projectDir}/${columns[1]}"
                columns[2] = "${projectDir}/${columns[2]}"
            }
        }
        writer.write(columns.join(',')+"\n")
    }

    writer.close()

    println("CSV file with located paths written to: ${outputFile}")
}

modifyPathsAndWriteCsv("tests/test_data/test_manifests/test_input_manifest.csv")
modifyPathsAndWriteCsv("tests/test_data/test_manifest_checks/consecutive_underscore_mnf.csv")
modifyPathsAndWriteCsv("tests/test_data/test_manifest_checks/duplicated_sample_id_mnf.csv")
modifyPathsAndWriteCsv("tests/test_data/test_manifest_checks/empty_sample_id_mnf.csv")
modifyPathsAndWriteCsv("tests/test_data/test_manifest_checks/mixed_errors_mnf.csv")

nextflow_workflow {

    name "Test Workflow SORT_READS_BY_REF manifest checks"
    script "workflows/SORT_READS_BY_REF.nf"
    workflow "SORT_READS_BY_REF"

    test("Should fail on consecutive underscore") {

        when {
            params {
                test_loc="${projectDir}/tests/test_data"
                db_path="${projectDir}/tests/test_data/test_kraken_databases/minimal"
            }
            workflow {
                """
                // define inputs of the workflow here. Example:
                input[0] = file("${params.test_loc}/test_manifest_checks/consecutive_underscore_mnf_located.csv")
                """
            }
        }

        then {
            assert workflow.failed
            assert workflow.exitStatus == 1
            assert workflow.stdout.contains('ERROR ~ Non alphanumeric sample id sample__04 [\'_\' is permitted]')
        }
    }
    
    test("Should fail on duplicated sample id") {

        when {
            params {
                test_loc="${projectDir}/tests/test_data"
                db_path="${projectDir}/tests/test_data/test_kraken_databases/minimal"
            }
            workflow {
                """
                // define inputs of the workflow here. Example:
                input[0] = file("${params.test_loc}/test_manifest_checks/duplicated_sample_id_mnf_located.csv")
                """
            }
        }

        then {
            assert workflow.failed
            assert workflow.exitStatus == 1
            assert workflow.stdout.contains('ERROR ~ sample01 is duplicated')
        }
    }

    test("Should fail if sample id is empty") {

        when {
            params {
                test_loc="${projectDir}/tests/test_data"
                db_path="${projectDir}/tests/test_data/test_kraken_databases/minimal"
            }
            workflow {
                """
                // define inputs of the workflow here. Example:
                input[0] = file("${params.test_loc}/test_manifest_checks/empty_sample_id_mnf_located.csv")
                """
            }
        }

        then {
            assert workflow.failed
            assert workflow.exitStatus == 1
            assert workflow.stdout.contains('ERROR ~ Empty sample_id detected.')
        }
    }

    test("Should fail on multiple errors") {

        when {
            params {
                test_loc="${projectDir}/tests/test_data"
                db_path="${projectDir}/tests/test_data/test_kraken_databases/minimal"
            }
            workflow {
                """
                // define inputs of the workflow here. Example:
                input[0] = file("${params.test_loc}/test_manifest_checks/mixed_errors_mnf_located.csv")
                """
            }
        }

        then {
            assert workflow.failed
            assert workflow.exitStatus == 1
            assert workflow.stdout.contains('ERROR ~ Non alphanumeric sample id sample__04 [\'_\' is permitted]')
            assert workflow.stdout.contains('ERROR ~ sample01 is duplicated')
            assert workflow.stdout.contains('ERROR ~ Non alphanumeric sample id sample#03 [\'_\' is permitted]')
            assert workflow.stdout.contains('ERROR ~ 3 critical errors in the manifest were detected. Please check README for more details.')

        }
    }

    test("Workflow Should run end to end without failures, no changes on snapshot expected") {

        when {
            params {
                test_loc="${projectDir}/tests/test_data"
                db_path="${projectDir}/tests/test_data/test_kraken_databases/minimal"
            }
            workflow {
                """
                // define inputs of the workflow here. Example:
                input[0] = file("${params.test_loc}/test_manifests/test_input_manifest_located.csv")
                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }

}
