// Copyright (C) 2023 Genome Surveillance Unit/Genome Research Ltd.

nextflow_workflow {

    name "Test Workflow SORT_READS_BY_REF manifest checks"
    script "workflows/SORT_READS_BY_REF.nf"
    workflow "SORT_READS_BY_REF"

    test("Workflow Should run end to end without failures, no changes on snapshot expected") {

        when {
            params {
                test_loc="${projectDir}/tests/test_data"
                db_path="${projectDir}/tests/test_data/test_kraken_databases/minimal"

                meta_1 = [
                    id: "FluH1N1_SARSCoV2_hPIV1_33K_ea_P1",
                ]
                reads_1 = [
                    "${projectDir}/tests/test_data/downsampled_10000reads_fastqs/FluH1N1_SARSCoV2_hPIV1_33K_ea_P1_10000reads_1.fastq.gz", 
                    "${projectDir}/tests/test_data/downsampled_10000reads_fastqs/FluH1N1_SARSCoV2_hPIV1_33K_ea_P1_10000reads_2.fastq.gz"
                ]
            
                meta_2 = [
                    id: "SARSCoV2_FluH1N1_50K_each_P1",
                ]
                reads_2 = [
                    "${projectDir}/tests/test_data/downsampled_10000reads_fastqs/SARSCoV2_FluH1N1_50K_each_P1_10000reads_1.fastq.gz", 
                    "${projectDir}/tests/test_data/downsampled_10000reads_fastqs/SARSCoV2_FluH1N1_50K_each_P1_10000reads_2.fastq.gz"
                ]
            
                meta_3 = [
                    id: "Zeptometrix_Panel_2_1_Control1_P1",
                ]
                reads_3 = [
                    "${projectDir}/tests/test_data/downsampled_10000reads_fastqs/Zeptometrix_Panel_2.1_Control1_P1_10000reads_1.fastq.gz", 
                    "${projectDir}/tests/test_data/downsampled_10000reads_fastqs/Zeptometrix_Panel_2.1_Control1_P1_10000reads_2.fastq.gz"
                ]

                meta_4 = [
                    id: "empty",
                ]
                reads_4 = [
                    "${projectDir}/tests/test_data/downsampled_10000reads_fastqs/empty_1.fastq.gz", 
                    "${projectDir}/tests/test_data/downsampled_10000reads_fastqs/empty_2.fastq.gz"
                ]
            }
            workflow {
                """
                // define inputs of the workflow here. Example:
                input[0] = Channel.of(tuple(params.meta_1, params.reads_1),
                                     tuple(params.meta_2, params.reads_2),
                                     tuple(params.meta_3, params.reads_3),
                                     tuple(params.meta_4, params.reads_4))

                """
            }
        }

        then {
            assert workflow.success
            assert snapshot(workflow.out).match()
        }

    }
}